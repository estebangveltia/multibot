generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bots {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  tenantId  Int
  status    String?   @default("active") @db.VarChar(30)
  createdAt DateTime? @default(now()) @db.DateTime(0)
  updatedAt DateTime? @default(now()) @db.DateTime(0)
  tenants   tenants   @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bots_ibfk_1")

  @@index([tenantId], map: "tenantId")
}

model interactions {
  id         Int       @id @default(autoincrement())
  timestamp  DateTime? @default(now()) @db.DateTime(0)
  tenantSlug String    @db.VarChar(100)
  username   String    @db.VarChar(100)
  botId      Int?
  menuOption String?   @db.VarChar(100)
  message    String?   @db.Text
  response   String?   @db.Text
  intent     String?   @db.VarChar(100)
  isFallback Boolean?  @default(false)
}

model conversations {
  id              Int                  @id @default(autoincrement())
  tenantSlug      String               @db.VarChar(100)
  username        String               @db.VarChar(100)
  createdAt       DateTime             @default(now()) @db.DateTime(0)
  status          conversations_status @default(PENDING)
  requiresFollowup Boolean?            @default(false)
  resolvedByHuman Boolean?             @default(false)
  notes           String?              @db.Text
}

enum conversations_status {
  PENDING
  IN_REVIEW
  CLOSED
}

model menus {
  id         Int     @id @default(autoincrement())
  tenantId   Int
  opcion_num Int
  label      String  @db.VarChar(255)
  response   String  @db.VarChar(1024)
  tenants    tenants @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "menus_ibfk_1")

  @@unique([tenantId, opcion_num], map: "uniq_tenant_option")
}

model metricsdaily {
  day           DateTime @db.Date
  tenantSlug    String   @db.VarChar(100)
  botId         Int
  conversations Int
  users         Int
  messages      Int
  fallbacks     Int
  avgPerConv    Float    @db.Float

  @@id([day, tenantSlug, botId])
  @@index([tenantSlug, day], map: "tenantSlug")
}

model tenants {
  id    Int     @id @default(autoincrement())
  name  String  @unique(map: "name") @db.VarChar(100)
  slug  String  @unique(map: "slug") @db.VarChar(100)
  bots  bots[]
  menus menus[]
  users users[]
}

model users {
  id        Int        @id @default(autoincrement())
  email     String     @unique(map: "email") @db.VarChar(150)
  password  String     @db.VarChar(255)
  name      String     @db.VarChar(150)
  role      users_role
  tenantId  Int?
  createdAt DateTime?  @default(now()) @db.DateTime(0)
  updatedAt DateTime?  @default(now()) @db.DateTime(0)
  tenants   tenants?   @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")

  @@index([tenantId], map: "tenantId")
}

enum users_role {
  SUPER_ADMIN
  TENANT_ADMIN
  ANALYST
  AGENT
  VIEWER
}
